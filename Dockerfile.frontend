# Multi-stage build for React frontend
FROM node:18-alpine AS build

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build arguments for environment variables
ARG VITE_API_URL
ARG VITE_ENABLE_SECURE_API_KEYS=true
ARG VITE_ENABLE_WORKSPACE_FEATURES=true
ARG VITE_DO_SPACES_ENDPOINT
ARG VITE_DO_SPACES_BUCKET
ARG VITE_DO_CDN_ENDPOINT

# Set environment variables for build
ENV VITE_API_URL=$VITE_API_URL
ENV VITE_ENABLE_SECURE_API_KEYS=$VITE_ENABLE_SECURE_API_KEYS
ENV VITE_ENABLE_WORKSPACE_FEATURES=$VITE_ENABLE_WORKSPACE_FEATURES
ENV VITE_DO_SPACES_ENDPOINT=$VITE_DO_SPACES_ENDPOINT
ENV VITE_DO_SPACES_BUCKET=$VITE_DO_SPACES_BUCKET
ENV VITE_DO_CDN_ENDPOINT=$VITE_DO_CDN_ENDPOINT

# Build the application
RUN npm run build

# Production stage with Nginx
FROM nginx:alpine AS production

# Install curl for healthcheck
RUN apk add --no-cache curl

# Copy custom nginx configuration
COPY nginx.frontend.conf /etc/nginx/conf.d/default.conf

# Copy built application
COPY --from=build /app/dist /usr/share/nginx/html

# Create nginx user if not exists
RUN adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx || true

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html
RUN chown -R nginx:nginx /var/cache/nginx

# Add health check endpoint
RUN echo '<!DOCTYPE html><html><head><title>Health Check</title></head><body><h1>OK</h1></body></html>' > /usr/share/nginx/html/health

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]