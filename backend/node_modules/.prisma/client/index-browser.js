
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash',
  role: 'role',
  firstName: 'firstName',
  lastName: 'lastName',
  avatar: 'avatar',
  phoneNumber: 'phoneNumber',
  timezone: 'timezone',
  lastLoginAt: 'lastLoginAt',
  emailVerified: 'emailVerified',
  emailVerifiedAt: 'emailVerifiedAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenHash: 'tokenHash',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  revokedAt: 'revokedAt'
};

exports.Prisma.WorkspaceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  logo: 'logo',
  website: 'website',
  industry: 'industry',
  size: 'size',
  isActive: 'isActive',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkspaceUserScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  userId: 'userId',
  role: 'role',
  permissions: 'permissions',
  joinedAt: 'joinedAt',
  lastActiveAt: 'lastActiveAt'
};

exports.Prisma.WorkspaceInvitationScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  email: 'email',
  role: 'role',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  acceptedAt: 'acceptedAt'
};

exports.Prisma.AudioUploadScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  originalFileName: 'originalFileName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  uploadStatus: 'uploadStatus',
  uploadProgress: 'uploadProgress',
  storageProvider: 'storageProvider',
  storagePath: 'storagePath',
  storageUrl: 'storageUrl',
  cdnUrl: 'cdnUrl',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProcessingJobScalarFieldEnum = {
  id: 'id',
  uploadId: 'uploadId',
  jobType: 'jobType',
  status: 'status',
  priority: 'priority',
  progress: 'progress',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  error: 'error',
  result: 'result',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AudioHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  processingJobId: 'processingJobId',
  title: 'title',
  audioUrl: 'audioUrl',
  fileSizeBytes: 'fileSizeBytes',
  durationSeconds: 'durationSeconds',
  transcript: 'transcript',
  summary: 'summary',
  keyMoments: 'keyMoments',
  processingOptions: 'processingOptions',
  language: 'language',
  confidence: 'confidence',
  speakers: 'speakers',
  tags: 'tags',
  createdAt: 'createdAt'
};

exports.Prisma.AudioSegmentScalarFieldEnum = {
  id: 'id',
  audioHistoryId: 'audioHistoryId',
  userId: 'userId',
  startTime: 'startTime',
  endTime: 'endTime',
  text: 'text',
  speaker: 'speaker',
  confidence: 'confidence',
  keywords: 'keywords',
  sentiment: 'sentiment',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.AudioChunkScalarFieldEnum = {
  id: 'id',
  uploadId: 'uploadId',
  chunkIndex: 'chunkIndex',
  startByte: 'startByte',
  endByte: 'endByte',
  size: 'size',
  storageKey: 'storageKey',
  checksum: 'checksum',
  uploadedAt: 'uploadedAt',
  createdAt: 'createdAt'
};

exports.Prisma.StorageProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  endpoint: 'endpoint',
  region: 'region',
  bucket: 'bucket',
  cdnEndpoint: 'cdnEndpoint',
  isActive: 'isActive',
  isDefault: 'isDefault',
  config: 'config',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileStorageScalarFieldEnum = {
  id: 'id',
  uploadId: 'uploadId',
  providerId: 'providerId',
  storageKey: 'storageKey',
  fileName: 'fileName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  checksum: 'checksum',
  publicUrl: 'publicUrl',
  cdnUrl: 'cdnUrl',
  expiresAt: 'expiresAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  lastAccessedAt: 'lastAccessedAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  tier: 'tier',
  price: 'price',
  currency: 'currency',
  billingPeriod: 'billingPeriod',
  features: 'features',
  quotas: 'quotas',
  isActive: 'isActive',
  isPublic: 'isPublic',
  trialDays: 'trialDays',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkspaceSubscriptionScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  planId: 'planId',
  status: 'status',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelledAt: 'cancelledAt',
  cancelReason: 'cancelReason',
  trialEnd: 'trialEnd',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingRecordScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  invoiceNumber: 'invoiceNumber',
  invoiceUrl: 'invoiceUrl',
  paymentMethod: 'paymentMethod',
  paymentIntentId: 'paymentIntentId',
  failureReason: 'failureReason',
  paidAt: 'paidAt',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  type: 'type',
  provider: 'provider',
  isDefault: 'isDefault',
  lastFour: 'lastFour',
  expiryMonth: 'expiryMonth',
  expiryYear: 'expiryYear',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiKeyManagementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  keyHash: 'keyHash',
  keyPrefix: 'keyPrefix',
  encryptedKey: 'encryptedKey',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  usageCount: 'usageCount',
  expiresAt: 'expiresAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiKeyUsageLogScalarFieldEnum = {
  id: 'id',
  apiKeyId: 'apiKeyId',
  endpoint: 'endpoint',
  method: 'method',
  statusCode: 'statusCode',
  responseTime: 'responseTime',
  tokensUsed: 'tokensUsed',
  cost: 'cost',
  error: 'error',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  userId: 'userId',
  openaiApiKeyEncrypted: 'openaiApiKeyEncrypted',
  elevenlabsApiKeyEncrypted: 'elevenlabsApiKeyEncrypted',
  preferredLanguage: 'preferredLanguage',
  summaryQuality: 'summaryQuality',
  theme: 'theme',
  notifications: 'notifications',
  privacy: 'privacy',
  settingsJson: 'settingsJson',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageMetricScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  metricType: 'metricType',
  value: 'value',
  period: 'period',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.UserQuotaScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  quotaType: 'quotaType',
  used: 'used',
  limit: 'limit',
  resetPeriod: 'resetPeriod',
  nextResetAt: 'nextResetAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StorageQuotaScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  totalBytes: 'totalBytes',
  usedBytes: 'usedBytes',
  fileCount: 'fileCount',
  lastCalculated: 'lastCalculated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageRecordScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  recordType: 'recordType',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalCost: 'totalCost',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  changes: 'changes',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SecurityEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventType: 'eventType',
  severity: 'severity',
  description: 'description',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata',
  resolved: 'resolved',
  resolvedAt: 'resolvedAt',
  resolvedBy: 'resolvedBy',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  actionUrl: 'actionUrl',
  read: 'read',
  readAt: 'readAt',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.EmailTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subject: 'subject',
  htmlContent: 'htmlContent',
  textContent: 'textContent',
  variables: 'variables',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailLogScalarFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  recipientEmail: 'recipientEmail',
  subject: 'subject',
  status: 'status',
  provider: 'provider',
  providerMessageId: 'providerMessageId',
  openedAt: 'openedAt',
  clickedAt: 'clickedAt',
  error: 'error',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.EmailPreferenceScalarFieldEnum = {
  userId: 'userId',
  marketing: 'marketing',
  transactional: 'transactional',
  security: 'security',
  newsletter: 'newsletter',
  productUpdates: 'productUpdates',
  unsubscribeToken: 'unsubscribeToken',
  updatedAt: 'updatedAt'
};

exports.Prisma.IntegrationScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  type: 'type',
  name: 'name',
  config: 'config',
  isActive: 'isActive',
  lastSyncAt: 'lastSyncAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkspaceAutomationScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  name: 'name',
  description: 'description',
  trigger: 'trigger',
  actions: 'actions',
  isActive: 'isActive',
  lastRunAt: 'lastRunAt',
  runCount: 'runCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebhookScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  url: 'url',
  events: 'events',
  secret: 'secret',
  isActive: 'isActive',
  lastTriggeredAt: 'lastTriggeredAt',
  failureCount: 'failureCount',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomFieldScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  name: 'name',
  fieldType: 'fieldType',
  isRequired: 'isRequired',
  options: 'options',
  defaultValue: 'defaultValue',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  name: 'name',
  color: 'color',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiAgentScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  name: 'name',
  description: 'description',
  systemPrompt: 'systemPrompt',
  model: 'model',
  temperature: 'temperature',
  maxTokens: 'maxTokens',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiConversationScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  userId: 'userId',
  title: 'title',
  context: 'context',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiMessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  role: 'role',
  content: 'content',
  tokensUsed: 'tokensUsed',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.AiTokenUsageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  provider: 'provider',
  model: 'model',
  tokensUsed: 'tokensUsed',
  cost: 'cost',
  purpose: 'purpose',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isSystem: 'isSystem',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  resource: 'resource',
  action: 'action',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  permissionId: 'permissionId',
  createdAt: 'createdAt'
};

exports.Prisma.UsageTrackingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  action: 'action',
  quantity: 'quantity',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.UsageReportScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  reportType: 'reportType',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  totalUploads: 'totalUploads',
  totalMinutes: 'totalMinutes',
  totalStorage: 'totalStorage',
  reportData: 'reportData',
  generatedAt: 'generatedAt'
};

exports.Prisma.PaymentGatewayConfigScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  environment: 'environment',
  isActive: 'isActive',
  config: 'config',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanPricingScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  currency: 'currency',
  price: 'price',
  interval: 'interval',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EwayTransactionScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  customerToken: 'customerToken',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  transactionStatus: 'transactionStatus',
  responseCode: 'responseCode',
  responseMessage: 'responseMessage',
  authCode: 'authCode',
  beagleScore: 'beagleScore',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EwayCustomerScalarFieldEnum = {
  id: 'id',
  customerToken: 'customerToken',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  cardNumber: 'cardNumber',
  cardName: 'cardName',
  cardExpiryMonth: 'cardExpiryMonth',
  cardExpiryYear: 'cardExpiryYear',
  isActive: 'isActive',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EwayRecurringScheduleScalarFieldEnum = {
  id: 'id',
  customerToken: 'customerToken',
  interval: 'interval',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  nextPayment: 'nextPayment',
  lastPayment: 'lastPayment',
  paymentCount: 'paymentCount',
  maxPayments: 'maxPayments',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EwayWebhookEventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  transactionId: 'transactionId',
  customerToken: 'customerToken',
  payload: 'payload',
  processed: 'processed',
  processedAt: 'processedAt',
  error: 'error',
  retryCount: 'retryCount',
  createdAt: 'createdAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  key: 'key',
  value: 'value',
  description: 'description',
  updatedAt: 'updatedAt'
};

exports.Prisma.HealthCheckScalarFieldEnum = {
  id: 'id',
  service: 'service',
  status: 'status',
  responseTime: 'responseTime',
  details: 'details',
  checkedAt: 'checkedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  RefreshToken: 'RefreshToken',
  Workspace: 'Workspace',
  WorkspaceUser: 'WorkspaceUser',
  WorkspaceInvitation: 'WorkspaceInvitation',
  AudioUpload: 'AudioUpload',
  ProcessingJob: 'ProcessingJob',
  AudioHistory: 'AudioHistory',
  AudioSegment: 'AudioSegment',
  AudioChunk: 'AudioChunk',
  StorageProvider: 'StorageProvider',
  FileStorage: 'FileStorage',
  SubscriptionPlan: 'SubscriptionPlan',
  WorkspaceSubscription: 'WorkspaceSubscription',
  BillingRecord: 'BillingRecord',
  PaymentMethod: 'PaymentMethod',
  ApiKeyManagement: 'ApiKeyManagement',
  ApiKeyUsageLog: 'ApiKeyUsageLog',
  UserSettings: 'UserSettings',
  UsageMetric: 'UsageMetric',
  UserQuota: 'UserQuota',
  StorageQuota: 'StorageQuota',
  UsageRecord: 'UsageRecord',
  AuditLog: 'AuditLog',
  SecurityEvent: 'SecurityEvent',
  Notification: 'Notification',
  EmailTemplate: 'EmailTemplate',
  EmailLog: 'EmailLog',
  EmailPreference: 'EmailPreference',
  Integration: 'Integration',
  WorkspaceAutomation: 'WorkspaceAutomation',
  Webhook: 'Webhook',
  CustomField: 'CustomField',
  Tag: 'Tag',
  AiAgent: 'AiAgent',
  AiConversation: 'AiConversation',
  AiMessage: 'AiMessage',
  AiTokenUsage: 'AiTokenUsage',
  Role: 'Role',
  Permission: 'Permission',
  RolePermission: 'RolePermission',
  UsageTracking: 'UsageTracking',
  UsageReport: 'UsageReport',
  PaymentGatewayConfig: 'PaymentGatewayConfig',
  PlanPricing: 'PlanPricing',
  EwayTransaction: 'EwayTransaction',
  EwayCustomer: 'EwayCustomer',
  EwayRecurringSchedule: 'EwayRecurringSchedule',
  EwayWebhookEvent: 'EwayWebhookEvent',
  SystemConfig: 'SystemConfig',
  HealthCheck: 'HealthCheck'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
