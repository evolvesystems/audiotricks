
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.WorkspaceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt',
  isActive: 'isActive',
  firstName: 'firstName',
  lastName: 'lastName',
  avatarUrl: 'avatarUrl',
  timezone: 'timezone',
  businessName: 'businessName',
  mobileNumber: 'mobileNumber',
  country: 'country',
  currency: 'currency',
  businessAddress: 'businessAddress',
  businessPhone: 'businessPhone',
  taxNumber: 'taxNumber',
  companySize: 'companySize',
  industry: 'industry'
};

exports.Prisma.WorkspaceUserScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt',
  permissions: 'permissions',
  lastActiveAt: 'lastActiveAt'
};

exports.Prisma.WorkspaceInvitationScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  email: 'email',
  role: 'role',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  acceptedAt: 'acceptedAt',
  invitedById: 'invitedById'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  revokedAt: 'revokedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenHash: 'tokenHash',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.SecurityEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventType: 'eventType',
  severity: 'severity',
  description: 'description',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  userId: 'userId',
  openaiApiKeyEncrypted: 'openaiApiKeyEncrypted',
  elevenlabsApiKeyEncrypted: 'elevenlabsApiKeyEncrypted',
  preferredLanguage: 'preferredLanguage',
  summaryQuality: 'summaryQuality',
  defaultSummaryStyle: 'defaultSummaryStyle',
  defaultTemperature: 'defaultTemperature',
  defaultMaxTokens: 'defaultMaxTokens',
  showCostEstimates: 'showCostEstimates',
  emailNotifications: 'emailNotifications',
  processingNotifications: 'processingNotifications',
  settingsJson: 'settingsJson',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkspaceSettingsScalarFieldEnum = {
  workspaceId: 'workspaceId',
  defaultProcessingOptions: 'defaultProcessingOptions',
  allowedFileTypes: 'allowedFileTypes',
  maxFileSize: 'maxFileSize',
  maxProcessingTime: 'maxProcessingTime',
  allowPublicSharing: 'allowPublicSharing',
  allowGuestAccess: 'allowGuestAccess',
  requireApprovalForUploads: 'requireApprovalForUploads',
  webhookUrl: 'webhookUrl',
  webhookSecret: 'webhookSecret',
  settingsJson: 'settingsJson',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProcessingTemplateScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  name: 'name',
  description: 'description',
  summaryStyle: 'summaryStyle',
  temperature: 'temperature',
  maxTokens: 'maxTokens',
  language: 'language',
  configJson: 'configJson',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiKeyManagementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  provider: 'provider',
  keyName: 'keyName',
  encryptedKey: 'encryptedKey',
  keyHash: 'keyHash',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  expiresAt: 'expiresAt',
  totalRequests: 'totalRequests',
  totalTokens: 'totalTokens',
  totalCost: 'totalCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AudioUploadScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  originalFilename: 'originalFilename',
  fileSize: 'fileSize',
  fileType: 'fileType',
  mimeType: 'mimeType',
  duration: 'duration',
  sampleRate: 'sampleRate',
  channels: 'channels',
  bitrate: 'bitrate',
  storageProvider: 'storageProvider',
  storagePath: 'storagePath',
  storageUrl: 'storageUrl',
  cdnUrl: 'cdnUrl',
  checksumMd5: 'checksumMd5',
  checksumSha256: 'checksumSha256',
  status: 'status',
  uploadedAt: 'uploadedAt',
  processingStartedAt: 'processingStartedAt',
  completedAt: 'completedAt'
};

exports.Prisma.ProcessingJobScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  uploadId: 'uploadId',
  jobType: 'jobType',
  priority: 'priority',
  processingOptions: 'processingOptions',
  status: 'status',
  progress: 'progress',
  cpuTimeMs: 'cpuTimeMs',
  memoryUsageMb: 'memoryUsageMb',
  queuedAt: 'queuedAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  errorMessage: 'errorMessage',
  retryCount: 'retryCount',
  maxRetries: 'maxRetries'
};

exports.Prisma.AudioHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  uploadId: 'uploadId',
  title: 'title',
  audioUrl: 'audioUrl',
  cdnUrl: 'cdnUrl',
  fileSizeBytes: 'fileSizeBytes',
  durationSeconds: 'durationSeconds',
  transcript: 'transcript',
  summary: 'summary',
  keyMoments: 'keyMoments',
  language: 'language',
  confidence: 'confidence',
  wordCount: 'wordCount',
  speakerCount: 'speakerCount',
  processingOptions: 'processingOptions',
  processingTime: 'processingTime',
  apiProvider: 'apiProvider',
  modelVersion: 'modelVersion',
  transcriptionCost: 'transcriptionCost',
  summarizationCost: 'summarizationCost',
  totalCost: 'totalCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AudioSegmentScalarFieldEnum = {
  id: 'id',
  historyId: 'historyId',
  segmentIndex: 'segmentIndex',
  startTime: 'startTime',
  endTime: 'endTime',
  text: 'text',
  confidence: 'confidence',
  language: 'language',
  speakerId: 'speakerId',
  emotion: 'emotion',
  sentiment: 'sentiment',
  tokens: 'tokens',
  logprobs: 'logprobs',
  temperature: 'temperature',
  avgLogprob: 'avgLogprob',
  compressionRatio: 'compressionRatio',
  noSpeechProb: 'noSpeechProb'
};

exports.Prisma.AudioChunkScalarFieldEnum = {
  id: 'id',
  uploadId: 'uploadId',
  chunkIndex: 'chunkIndex',
  startTime: 'startTime',
  endTime: 'endTime',
  fileSize: 'fileSize',
  storagePath: 'storagePath',
  checksumMd5: 'checksumMd5',
  status: 'status',
  processedAt: 'processedAt'
};

exports.Prisma.AudioProjectScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  name: 'name',
  description: 'description',
  color: 'color',
  status: 'status',
  isPublic: 'isPublic',
  tags: 'tags',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageMetricScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  metricType: 'metricType',
  provider: 'provider',
  quantity: 'quantity',
  cost: 'cost',
  currency: 'currency',
  metadata: 'metadata',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  recordedAt: 'recordedAt'
};

exports.Prisma.UserQuotaScalarFieldEnum = {
  userId: 'userId',
  monthlyApiCalls: 'monthlyApiCalls',
  monthlyTokens: 'monthlyTokens',
  monthlyStorageMb: 'monthlyStorageMb',
  monthlyProcessingMin: 'monthlyProcessingMin',
  currentApiCalls: 'currentApiCalls',
  currentTokens: 'currentTokens',
  currentStorageMb: 'currentStorageMb',
  currentProcessingMin: 'currentProcessingMin',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  lastResetAt: 'lastResetAt',
  allowOverages: 'allowOverages',
  overageCostPerToken: 'overageCostPerToken'
};

exports.Prisma.StorageQuotaScalarFieldEnum = {
  workspaceId: 'workspaceId',
  maxStorageBytes: 'maxStorageBytes',
  maxFileCount: 'maxFileCount',
  maxFileSize: 'maxFileSize',
  currentStorageBytes: 'currentStorageBytes',
  currentFileCount: 'currentFileCount',
  retentionDays: 'retentionDays',
  autoCleanup: 'autoCleanup',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  planCode: 'planCode',
  price: 'price',
  currency: 'currency',
  billingInterval: 'billingInterval',
  tier: 'tier',
  sortOrder: 'sortOrder',
  maxApiCalls: 'maxApiCalls',
  maxTokens: 'maxTokens',
  maxStorageMb: 'maxStorageMb',
  maxProcessingMin: 'maxProcessingMin',
  maxWorkspaces: 'maxWorkspaces',
  maxUsers: 'maxUsers',
  maxFileSize: 'maxFileSize',
  maxTranscriptionsMonthly: 'maxTranscriptionsMonthly',
  maxFilesDaily: 'maxFilesDaily',
  maxFilesMonthly: 'maxFilesMonthly',
  maxConcurrentJobs: 'maxConcurrentJobs',
  maxVoiceSynthesisMonthly: 'maxVoiceSynthesisMonthly',
  maxExportOperationsMonthly: 'maxExportOperationsMonthly',
  maxAudioDurationMinutes: 'maxAudioDurationMinutes',
  priorityLevel: 'priorityLevel',
  planCategory: 'planCategory',
  trialDays: 'trialDays',
  isCustom: 'isCustom',
  isEnterprise: 'isEnterprise',
  features: 'features',
  recommendedFor: 'recommendedFor',
  allowedFileTypes: 'allowedFileTypes',
  analysisFeatures: 'analysisFeatures',
  collaborationFeatures: 'collaborationFeatures',
  integrationFeatures: 'integrationFeatures',
  isActive: 'isActive',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanPricingScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  currency: 'currency',
  price: 'price',
  billingPeriod: 'billingPeriod',
  region: 'region',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CurrencyScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  symbol: 'symbol',
  exchangeRate: 'exchangeRate',
  lastUpdated: 'lastUpdated',
  isActive: 'isActive',
  isPrimary: 'isPrimary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkspaceSubscriptionScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  planId: 'planId',
  status: 'status',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  nextBillingDate: 'nextBillingDate',
  trialEnd: 'trialEnd',
  paymentGateway: 'paymentGateway',
  paymentMethodId: 'paymentMethodId',
  currency: 'currency',
  amount: 'amount',
  ewayCustomerId: 'ewayCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripeCustomerId: 'stripeCustomerId',
  cancelledAt: 'cancelledAt',
  cancelReason: 'cancelReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingRecordScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  invoiceNumber: 'invoiceNumber',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  invoiceDate: 'invoiceDate',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  stripeInvoiceId: 'stripeInvoiceId',
  ewayTransactionId: 'ewayTransactionId',
  invoiceUrl: 'invoiceUrl',
  failureReason: 'failureReason',
  usageDetails: 'usageDetails',
  createdAt: 'createdAt'
};

exports.Prisma.UsageRecordScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  recordType: 'recordType',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalCost: 'totalCost',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.UsageCounterScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  periodType: 'periodType',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  transcriptionsUsed: 'transcriptionsUsed',
  filesUploaded: 'filesUploaded',
  voiceSynthesisUsed: 'voiceSynthesisUsed',
  exportOperationsUsed: 'exportOperationsUsed',
  totalProcessingMinutes: 'totalProcessingMinutes',
  concurrentJobsPeak: 'concurrentJobsPeak',
  featureUsage: 'featureUsage',
  lastResetAt: 'lastResetAt',
  autoReset: 'autoReset',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanRecommendationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  currentPlanId: 'currentPlanId',
  recommendedPlanId: 'recommendedPlanId',
  recommendationReason: 'recommendationReason',
  confidenceScore: 'confidenceScore',
  usagePattern: 'usagePattern',
  projectedSavings: 'projectedSavings',
  roiMonths: 'roiMonths',
  triggeredBy: 'triggeredBy',
  benefits: 'benefits',
  limitationsRemoved: 'limitationsRemoved',
  status: 'status',
  viewedAt: 'viewedAt',
  dismissedAt: 'dismissedAt',
  acceptedAt: 'acceptedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomPlanScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  basePlanId: 'basePlanId',
  planName: 'planName',
  description: 'description',
  customMaxTranscriptionsMonthly: 'customMaxTranscriptionsMonthly',
  customMaxFilesDaily: 'customMaxFilesDaily',
  customMaxFilesMonthly: 'customMaxFilesMonthly',
  customMaxConcurrentJobs: 'customMaxConcurrentJobs',
  customMaxVoiceSynthesisMonthly: 'customMaxVoiceSynthesisMonthly',
  customMaxExportOperationsMonthly: 'customMaxExportOperationsMonthly',
  customMaxAudioDurationMinutes: 'customMaxAudioDurationMinutes',
  customPriorityLevel: 'customPriorityLevel',
  customFeatures: 'customFeatures',
  excludedFeatures: 'excludedFeatures',
  additionalFeatures: 'additionalFeatures',
  customPrice: 'customPrice',
  pricingModel: 'pricingModel',
  billingInterval: 'billingInterval',
  contractStartDate: 'contractStartDate',
  contractEndDate: 'contractEndDate',
  autoRenew: 'autoRenew',
  noticePeriodDays: 'noticePeriodDays',
  requestedBy: 'requestedBy',
  approvedBy: 'approvedBy',
  approvalStatus: 'approvalStatus',
  approvalNotes: 'approvalNotes',
  isActive: 'isActive',
  activatedAt: 'activatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeatureFlagScalarFieldEnum = {
  id: 'id',
  featureName: 'featureName',
  displayName: 'displayName',
  description: 'description',
  category: 'category',
  featureType: 'featureType',
  minPlanLevel: 'minPlanLevel',
  requiredPlans: 'requiredPlans',
  excludedPlans: 'excludedPlans',
  isEnabled: 'isEnabled',
  isBeta: 'isBeta',
  isDeprecated: 'isDeprecated',
  usageCount: 'usageCount',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanFeatureMatrixScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  featureFlagId: 'featureFlagId',
  isEnabled: 'isEnabled',
  usageLimit: 'usageLimit',
  includedUsage: 'includedUsage',
  overageRate: 'overageRate',
  createdAt: 'createdAt'
};

exports.Prisma.EwayCustomerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ewayCustomerToken: 'ewayCustomerToken',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  companyName: 'companyName',
  country: 'country',
  streetAddress: 'streetAddress',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  phoneNumber: 'phoneNumber',
  cardLastFour: 'cardLastFour',
  cardType: 'cardType',
  cardExpiryMonth: 'cardExpiryMonth',
  cardExpiryYear: 'cardExpiryYear',
  ewayReference: 'ewayReference',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EwayTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  ewayCustomerId: 'ewayCustomerId',
  subscriptionId: 'subscriptionId',
  transactionType: 'transactionType',
  amount: 'amount',
  currency: 'currency',
  ewayTransactionId: 'ewayTransactionId',
  ewayAccessCode: 'ewayAccessCode',
  ewayAuthCode: 'ewayAuthCode',
  responseCode: 'responseCode',
  responseMessage: 'responseMessage',
  transactionStatus: 'transactionStatus',
  isRecurring: 'isRecurring',
  ewayInvoiceNumber: 'ewayInvoiceNumber',
  ewayInvoiceReference: 'ewayInvoiceReference',
  fraudAction: 'fraudAction',
  verificationStatus: 'verificationStatus',
  beagleScore: 'beagleScore',
  errorCode: 'errorCode',
  errorMessage: 'errorMessage',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  ewayRawResponse: 'ewayRawResponse'
};

exports.Prisma.EwayRecurringScheduleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  ewayCustomerId: 'ewayCustomerId',
  subscriptionId: 'subscriptionId',
  scheduleType: 'scheduleType',
  billingAmount: 'billingAmount',
  currency: 'currency',
  startDate: 'startDate',
  nextBillingDate: 'nextBillingDate',
  lastProcessedAt: 'lastProcessedAt',
  status: 'status',
  failedAttempts: 'failedAttempts',
  lastTransactionId: 'lastTransactionId',
  cancelledAt: 'cancelledAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EwayWebhookEventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  ewayTransactionId: 'ewayTransactionId',
  ewayCustomerToken: 'ewayCustomerToken',
  eventData: 'eventData',
  rawPayload: 'rawPayload',
  processed: 'processed',
  processedAt: 'processedAt',
  sourceIp: 'sourceIp',
  createdAt: 'createdAt'
};

exports.Prisma.ExportHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  exportType: 'exportType',
  dataType: 'dataType',
  dateFrom: 'dateFrom',
  dateTo: 'dateTo',
  workspaceIds: 'workspaceIds',
  filters: 'filters',
  filename: 'filename',
  fileSize: 'fileSize',
  storagePath: 'storagePath',
  downloadUrl: 'downloadUrl',
  expiresAt: 'expiresAt',
  status: 'status',
  downloadCount: 'downloadCount',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  requestId: 'requestId',
  details: 'details',
  oldValues: 'oldValues',
  newValues: 'newValues',
  severity: 'severity',
  category: 'category',
  createdAt: 'createdAt'
};

exports.Prisma.DataRetentionPolicyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  dataType: 'dataType',
  retentionDays: 'retentionDays',
  autoDelete: 'autoDelete',
  archiveBeforeDelete: 'archiveBeforeDelete',
  appliesToWorkspaces: 'appliesToWorkspaces',
  excludeWorkspaces: 'excludeWorkspaces',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastRunAt: 'lastRunAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  provider: 'provider',
  providerMethodId: 'providerMethodId',
  type: 'type',
  last4: 'last4',
  brand: 'brand',
  expiryMonth: 'expiryMonth',
  expiryYear: 'expiryYear',
  isDefault: 'isDefault',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestimonialScalarFieldEnum = {
  id: 'id',
  customerName: 'customerName',
  customerRole: 'customerRole',
  companyName: 'companyName',
  avatarUrl: 'avatarUrl',
  content: 'content',
  rating: 'rating',
  featuredOn: 'featuredOn',
  useCase: 'useCase',
  isVerified: 'isVerified',
  verificationMethod: 'verificationMethod',
  isActive: 'isActive',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.WebsiteContentScalarFieldEnum = {
  id: 'id',
  contentKey: 'contentKey',
  contentType: 'contentType',
  contentValue: 'contentValue',
  contentMetadata: 'contentMetadata',
  section: 'section',
  page: 'page',
  isActive: 'isActive',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  isSystemRole: 'isSystemRole',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  resource: 'resource',
  action: 'action',
  isSystemPermission: 'isSystemPermission',
  createdAt: 'createdAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  permissionId: 'permissionId',
  createdAt: 'createdAt'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  assignedBy: 'assignedBy',
  assignedAt: 'assignedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Workspace: 'Workspace',
  User: 'User',
  WorkspaceUser: 'WorkspaceUser',
  WorkspaceInvitation: 'WorkspaceInvitation',
  RefreshToken: 'RefreshToken',
  Session: 'Session',
  SecurityEvent: 'SecurityEvent',
  UserSettings: 'UserSettings',
  WorkspaceSettings: 'WorkspaceSettings',
  ProcessingTemplate: 'ProcessingTemplate',
  ApiKeyManagement: 'ApiKeyManagement',
  AudioUpload: 'AudioUpload',
  ProcessingJob: 'ProcessingJob',
  AudioHistory: 'AudioHistory',
  AudioSegment: 'AudioSegment',
  AudioChunk: 'AudioChunk',
  AudioProject: 'AudioProject',
  UsageMetric: 'UsageMetric',
  UserQuota: 'UserQuota',
  StorageQuota: 'StorageQuota',
  SubscriptionPlan: 'SubscriptionPlan',
  PlanPricing: 'PlanPricing',
  Currency: 'Currency',
  WorkspaceSubscription: 'WorkspaceSubscription',
  BillingRecord: 'BillingRecord',
  UsageRecord: 'UsageRecord',
  UsageCounter: 'UsageCounter',
  PlanRecommendation: 'PlanRecommendation',
  CustomPlan: 'CustomPlan',
  FeatureFlag: 'FeatureFlag',
  PlanFeatureMatrix: 'PlanFeatureMatrix',
  EwayCustomer: 'EwayCustomer',
  EwayTransaction: 'EwayTransaction',
  EwayRecurringSchedule: 'EwayRecurringSchedule',
  EwayWebhookEvent: 'EwayWebhookEvent',
  ExportHistory: 'ExportHistory',
  AuditLog: 'AuditLog',
  DataRetentionPolicy: 'DataRetentionPolicy',
  PaymentMethod: 'PaymentMethod',
  Testimonial: 'Testimonial',
  WebsiteContent: 'WebsiteContent',
  Role: 'Role',
  Permission: 'Permission',
  RolePermission: 'RolePermission',
  UserRole: 'UserRole'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
